(function() {var type_impls = {
"caesar_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Sender&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Clone this sender. [<code>Sender</code>] acts as a handle to the ending a channel. Remaining channel\ncontents will only be cleaned up when all senders and the receiver have been dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","caesar_core::shared::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","caesar_core::shared::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Drop-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","caesar_core::shared::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_async\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send_async</a>(&amp;self, item: T) -&gt; SendFut&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Asynchronously send a value into the channel, returning an error if all receivers have been\ndropped. If the channel is bounded and is full, the returned future will yield to the async\nruntime.</p>\n<p>In the current implementation, the returned future will not yield to the async runtime if the\nchannel is unbounded. This may change in later versions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_send_async\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_send_async</a>&lt;'a&gt;(self, item: T) -&gt; SendFut&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert this sender into a future that asynchronously sends a single message into the channel,\nreturning an error if all receivers have been dropped. If the channel is bounded and is full,\nthis future will yield to the async runtime.</p>\n<p>In the current implementation, the returned future will not yield to the async runtime if the\nchannel is unbounded. This may change in later versions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sink\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">sink</a>(&amp;self) -&gt; SendSink&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create an asynchronous sink that uses this sender to asynchronously send messages into the\nchannel. The sender will continue to be usable after the sink has been dropped.</p>\n<p>In the current implementation, the returned sink will not yield to the async runtime if the\nchannel is unbounded. This may change in later versions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_sink\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_sink</a>&lt;'a&gt;(self) -&gt; SendSink&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert this sender into a sink that allows asynchronously sending messages into the channel.</p>\n<p>In the current implementation, the returned sink will not yield to the async runtime if the\nchannel is unbounded. This may change in later versions.</p>\n</div></details></div></details>",0,"caesar_core::shared::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_send</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, TrySendError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempt to send a value into the channel. If the channel is bounded and full, or all\nreceivers have been dropped, an error is returned. If the channel associated with this\nsender is unbounded, this method has the same behaviour as [<code>Sender::send</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, SendError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Send a value into the channel, returning an error if all receivers have been dropped.\nIf the channel is bounded and is full, this method will block until space is available\nor all receivers have been dropped. If the channel is unbounded, this method will not\nblock.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_deadline\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send_deadline</a>(\n    &amp;self,\n    msg: T,\n    deadline: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/std/time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, SendTimeoutError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Send a value into the channel, returning an error if all receivers have been dropped\nor the deadline has passed. If the channel is bounded and is full, this method will\nblock until space is available, the deadline is reached, or all receivers have been\ndropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_timeout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send_timeout</a>(\n    &amp;self,\n    msg: T,\n    dur: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, SendTimeoutError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Send a value into the channel, returning an error if all receivers have been dropped\nor the timeout has expired. If the channel is bounded and is full, this method will\nblock until space is available, the timeout has expired, or all receivers have been\ndropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disconnected\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disconnected</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if all receivers for this channel have been dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the channel is empty.\nNote: Zero-capacity channels are always empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the channel is full.\nNote: Zero-capacity channels are always full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of messages in the channel</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the channel is bounded, returns its capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sender_count\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">sender_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the number of senders that currently exist, including this one.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.receiver_count\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">receiver_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the number of receivers that currently exist.</p>\n<p>Note that this method makes no guarantees that a subsequent send will succeed; it’s\npossible that between <code>receiver_count()</code> being called and a <code>send()</code>, all open receivers\ncould drop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">downgrade</a>(&amp;self) -&gt; WeakSender&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a [<code>WeakSender</code>] that does not keep the channel open.</p>\n<p>The channel is closed once all <code>Sender</code>s are dropped, even if there\nare still active <code>WeakSender</code>s.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_channel\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">same_channel</a>(&amp;self, other: &amp;Sender&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the senders are belong to the same channel.</p>\n</div></details></div></details>",0,"caesar_core::shared::Sender"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()